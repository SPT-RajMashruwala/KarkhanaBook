//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 02-03-2022 15:38:23
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace KarkhanaBookContext
{

    [DatabaseAttribute(Name = "KarkhanaBook")]
    [ProviderAttribute(typeof(Devart.Data.SqlServer.Linq.Provider.SqlDataProvider))]
    public partial class KarkhanaBookDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(KarkhanaBookDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertChallanSlip(ChallanSlip instance);
        partial void UpdateChallanSlip(ChallanSlip instance);
        partial void DeleteChallanSlip(ChallanSlip instance);
        partial void InsertKarigerDailySheet(KarigerDailySheet instance);
        partial void UpdateKarigerDailySheet(KarigerDailySheet instance);
        partial void DeleteKarigerDailySheet(KarigerDailySheet instance);
        partial void InsertPaymentSlip(PaymentSlip instance);
        partial void UpdatePaymentSlip(PaymentSlip instance);
        partial void DeletePaymentSlip(PaymentSlip instance);
        partial void InsertRefreshToken(RefreshToken instance);
        partial void UpdateRefreshToken(RefreshToken instance);
        partial void DeleteRefreshToken(RefreshToken instance);
        partial void InsertRole(Role instance);
        partial void UpdateRole(Role instance);
        partial void DeleteRole(Role instance);
        partial void InsertShift(Shift instance);
        partial void UpdateShift(Shift instance);
        partial void DeleteShift(Shift instance);
        partial void InsertTakaChallan(TakaChallan instance);
        partial void UpdateTakaChallan(TakaChallan instance);
        partial void DeleteTakaChallan(TakaChallan instance);
        partial void InsertTakaIssue(TakaIssue instance);
        partial void UpdateTakaIssue(TakaIssue instance);
        partial void DeleteTakaIssue(TakaIssue instance);
        partial void InsertTakaSheet(TakaSheet instance);
        partial void UpdateTakaSheet(TakaSheet instance);
        partial void DeleteTakaSheet(TakaSheet instance);
        partial void InsertUserRefreshToken(UserRefreshToken instance);
        partial void UpdateUserRefreshToken(UserRefreshToken instance);
        partial void DeleteUserRefreshToken(UserRefreshToken instance);
        partial void InsertUser(User instance);
        partial void UpdateUser(User instance);
        partial void DeleteUser(User instance);

        #endregion

        public KarkhanaBookDataContext() :
        base(@"Data Source=DESKTOP-D9KFJSI;Initial Catalog=KarkhanaBook;Integrated Security=True;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public KarkhanaBookDataContext(MappingSource mappingSource) :
        base(@"Data Source=DESKTOP-D9KFJSI;Initial Catalog=KarkhanaBook;Integrated Security=True;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public KarkhanaBookDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public KarkhanaBookDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public KarkhanaBookDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public KarkhanaBookDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<ChallanSlip> ChallanSlips
        {
            get
            {
                return this.GetTable<ChallanSlip>();
            }
        }

        public Devart.Data.Linq.Table<KarigerDailySheet> KarigerDailySheets
        {
            get
            {
                return this.GetTable<KarigerDailySheet>();
            }
        }

        public Devart.Data.Linq.Table<PaymentSlip> PaymentSlips
        {
            get
            {
                return this.GetTable<PaymentSlip>();
            }
        }

        public Devart.Data.Linq.Table<RefreshToken> RefreshTokens
        {
            get
            {
                return this.GetTable<RefreshToken>();
            }
        }

        public Devart.Data.Linq.Table<Role> Roles
        {
            get
            {
                return this.GetTable<Role>();
            }
        }

        public Devart.Data.Linq.Table<Shift> Shifts
        {
            get
            {
                return this.GetTable<Shift>();
            }
        }

        public Devart.Data.Linq.Table<TakaChallan> TakaChallans
        {
            get
            {
                return this.GetTable<TakaChallan>();
            }
        }

        public Devart.Data.Linq.Table<TakaIssue> TakaIssues
        {
            get
            {
                return this.GetTable<TakaIssue>();
            }
        }

        public Devart.Data.Linq.Table<TakaSheet> TakaSheets
        {
            get
            {
                return this.GetTable<TakaSheet>();
            }
        }

        public Devart.Data.Linq.Table<UserRefreshToken> UserRefreshTokens
        {
            get
            {
                return this.GetTable<UserRefreshToken>();
            }
        }

        public Devart.Data.Linq.Table<User> Users
        {
            get
            {
                return this.GetTable<User>();
            }
        }
    }
}

namespace KarkhanaBookContext
{

    /// <summary>
    /// There are no comments for KarkhanaBookContext.ChallanSlip in the schema.
    /// </summary>
    [Table(Name = @"dbo.ChallanSlip")]
    public partial class ChallanSlip : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ChallanSlipIndex;

        private string _ChallanSlipSerialNumber;

        private string _SellerName;

        private string _RangeCartoonSerialNumber;

        private int? _TotalCartoons;

        private double? _RsPerKG;

        private double? _TotalWeight;

        private System.DateTime? _DateOfPurchase;

        private string _Remark;

        private System.DateTime? _DateTime;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnChallanSlipIndexChanging(int value);
        partial void OnChallanSlipIndexChanged();
        partial void OnChallanSlipSerialNumberChanging(string value);
        partial void OnChallanSlipSerialNumberChanged();
        partial void OnSellerNameChanging(string value);
        partial void OnSellerNameChanged();
        partial void OnRangeCartoonSerialNumberChanging(string value);
        partial void OnRangeCartoonSerialNumberChanged();
        partial void OnTotalCartoonsChanging(int? value);
        partial void OnTotalCartoonsChanged();
        partial void OnRsPerKGChanging(double? value);
        partial void OnRsPerKGChanged();
        partial void OnTotalWeightChanging(double? value);
        partial void OnTotalWeightChanged();
        partial void OnDateOfPurchaseChanging(System.DateTime? value);
        partial void OnDateOfPurchaseChanged();
        partial void OnRemarkChanging(string value);
        partial void OnRemarkChanged();
        partial void OnDateTimeChanging(System.DateTime? value);
        partial void OnDateTimeChanged();
        #endregion

        public ChallanSlip()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ChallanSlipIndex in the schema.
        /// </summary>
        [Column(Storage = "_ChallanSlipIndex", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ChallanSlipIndex
        {
            get
            {
                return this._ChallanSlipIndex;
            }
            set
            {
                if (this._ChallanSlipIndex != value)
                {
                    this.OnChallanSlipIndexChanging(value);
                    this.SendPropertyChanging("ChallanSlipIndex");
                    this._ChallanSlipIndex = value;
                    this.SendPropertyChanged("ChallanSlipIndex");
                    this.OnChallanSlipIndexChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ChallanSlipSerialNumber in the schema.
        /// </summary>
        [Column(Storage = "_ChallanSlipSerialNumber", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string ChallanSlipSerialNumber
        {
            get
            {
                return this._ChallanSlipSerialNumber;
            }
            set
            {
                if (this._ChallanSlipSerialNumber != value)
                {
                    this.OnChallanSlipSerialNumberChanging(value);
                    this.SendPropertyChanging("ChallanSlipSerialNumber");
                    this._ChallanSlipSerialNumber = value;
                    this.SendPropertyChanged("ChallanSlipSerialNumber");
                    this.OnChallanSlipSerialNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SellerName in the schema.
        /// </summary>
        [Column(Storage = "_SellerName", DbType = "VARCHAR(100)", UpdateCheck = UpdateCheck.Never)]
        public string SellerName
        {
            get
            {
                return this._SellerName;
            }
            set
            {
                if (this._SellerName != value)
                {
                    this.OnSellerNameChanging(value);
                    this.SendPropertyChanging("SellerName");
                    this._SellerName = value;
                    this.SendPropertyChanged("SellerName");
                    this.OnSellerNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RangeCartoonSerialNumber in the schema.
        /// </summary>
        [Column(Storage = "_RangeCartoonSerialNumber", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string RangeCartoonSerialNumber
        {
            get
            {
                return this._RangeCartoonSerialNumber;
            }
            set
            {
                if (this._RangeCartoonSerialNumber != value)
                {
                    this.OnRangeCartoonSerialNumberChanging(value);
                    this.SendPropertyChanging("RangeCartoonSerialNumber");
                    this._RangeCartoonSerialNumber = value;
                    this.SendPropertyChanged("RangeCartoonSerialNumber");
                    this.OnRangeCartoonSerialNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalCartoons in the schema.
        /// </summary>
        [Column(Storage = "_TotalCartoons", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? TotalCartoons
        {
            get
            {
                return this._TotalCartoons;
            }
            set
            {
                if (this._TotalCartoons != value)
                {
                    this.OnTotalCartoonsChanging(value);
                    this.SendPropertyChanging("TotalCartoons");
                    this._TotalCartoons = value;
                    this.SendPropertyChanged("TotalCartoons");
                    this.OnTotalCartoonsChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RsPerKG in the schema.
        /// </summary>
        [Column(Storage = "_RsPerKG", DbType = "FLOAT", UpdateCheck = UpdateCheck.Never)]
        public double? RsPerKG
        {
            get
            {
                return this._RsPerKG;
            }
            set
            {
                if (this._RsPerKG != value)
                {
                    this.OnRsPerKGChanging(value);
                    this.SendPropertyChanging("RsPerKG");
                    this._RsPerKG = value;
                    this.SendPropertyChanged("RsPerKG");
                    this.OnRsPerKGChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalWeight in the schema.
        /// </summary>
        [Column(Storage = "_TotalWeight", DbType = "FLOAT", UpdateCheck = UpdateCheck.Never)]
        public double? TotalWeight
        {
            get
            {
                return this._TotalWeight;
            }
            set
            {
                if (this._TotalWeight != value)
                {
                    this.OnTotalWeightChanging(value);
                    this.SendPropertyChanging("TotalWeight");
                    this._TotalWeight = value;
                    this.SendPropertyChanged("TotalWeight");
                    this.OnTotalWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateOfPurchase in the schema.
        /// </summary>
        [Column(Storage = "_DateOfPurchase", DbType = "DATETIME", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? DateOfPurchase
        {
            get
            {
                return this._DateOfPurchase;
            }
            set
            {
                if (this._DateOfPurchase != value)
                {
                    this.OnDateOfPurchaseChanging(value);
                    this.SendPropertyChanging("DateOfPurchase");
                    this._DateOfPurchase = value;
                    this.SendPropertyChanged("DateOfPurchase");
                    this.OnDateOfPurchaseChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Remark in the schema.
        /// </summary>
        [Column(Storage = "_Remark", DbType = "VARCHAR(150)", UpdateCheck = UpdateCheck.Never)]
        public string Remark
        {
            get
            {
                return this._Remark;
            }
            set
            {
                if (this._Remark != value)
                {
                    this.OnRemarkChanging(value);
                    this.SendPropertyChanging("Remark");
                    this._Remark = value;
                    this.SendPropertyChanged("Remark");
                    this.OnRemarkChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateTime in the schema.
        /// </summary>
        [Column(Storage = "_DateTime", DbType = "DATETIME", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? DateTime
        {
            get
            {
                return this._DateTime;
            }
            set
            {
                if (this._DateTime != value)
                {
                    this.OnDateTimeChanging(value);
                    this.SendPropertyChanging("DateTime");
                    this._DateTime = value;
                    this.SendPropertyChanged("DateTime");
                    this.OnDateTimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for KarkhanaBookContext.KarigerDailySheet in the schema.
    /// </summary>
    [Table(Name = @"dbo.KarigerDailySheet")]
    public partial class KarigerDailySheet : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IndexNumber;

        private int? _UserID;

        private int? _ShiftID;

        private System.DateTime? _Date;

        private int? _MachineNumber;

        private double? _AVGOfMachine;

        private string _Remark;
        #pragma warning restore 0649

        private EntityRef<User> _User;

        private EntityRef<Shift> _Shift;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIndexNumberChanging(int value);
        partial void OnIndexNumberChanged();
        partial void OnUserIDChanging(int? value);
        partial void OnUserIDChanged();
        partial void OnShiftIDChanging(int? value);
        partial void OnShiftIDChanged();
        partial void OnDateChanging(System.DateTime? value);
        partial void OnDateChanged();
        partial void OnMachineNumberChanging(int? value);
        partial void OnMachineNumberChanged();
        partial void OnAVGOfMachineChanging(double? value);
        partial void OnAVGOfMachineChanged();
        partial void OnRemarkChanging(string value);
        partial void OnRemarkChanged();
        #endregion

        public KarigerDailySheet()
        {
            this._User  = default(EntityRef<User>);
            this._Shift  = default(EntityRef<Shift>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IndexNumber in the schema.
        /// </summary>
        [Column(Storage = "_IndexNumber", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IndexNumber
        {
            get
            {
                return this._IndexNumber;
            }
            set
            {
                if (this._IndexNumber != value)
                {
                    this.OnIndexNumberChanging(value);
                    this.SendPropertyChanging("IndexNumber");
                    this._IndexNumber = value;
                    this.SendPropertyChanged("IndexNumber");
                    this.OnIndexNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserID in the schema.
        /// </summary>
        [Column(Storage = "_UserID", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if (this._UserID != value)
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging("UserID");
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShiftID in the schema.
        /// </summary>
        [Column(Storage = "_ShiftID", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? ShiftID
        {
            get
            {
                return this._ShiftID;
            }
            set
            {
                if (this._ShiftID != value)
                {
                    if (this._Shift.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnShiftIDChanging(value);
                    this.SendPropertyChanging("ShiftID");
                    this._ShiftID = value;
                    this.SendPropertyChanged("ShiftID");
                    this.OnShiftIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Date in the schema.
        /// </summary>
        [Column(Storage = "_Date", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if (this._Date != value)
                {
                    this.OnDateChanging(value);
                    this.SendPropertyChanging("Date");
                    this._Date = value;
                    this.SendPropertyChanged("Date");
                    this.OnDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MachineNumber in the schema.
        /// </summary>
        [Column(Storage = "_MachineNumber", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? MachineNumber
        {
            get
            {
                return this._MachineNumber;
            }
            set
            {
                if (this._MachineNumber != value)
                {
                    this.OnMachineNumberChanging(value);
                    this.SendPropertyChanging("MachineNumber");
                    this._MachineNumber = value;
                    this.SendPropertyChanged("MachineNumber");
                    this.OnMachineNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AVGOfMachine in the schema.
        /// </summary>
        [Column(Storage = "_AVGOfMachine", DbType = "FLOAT", UpdateCheck = UpdateCheck.Never)]
        public double? AVGOfMachine
        {
            get
            {
                return this._AVGOfMachine;
            }
            set
            {
                if (this._AVGOfMachine != value)
                {
                    this.OnAVGOfMachineChanging(value);
                    this.SendPropertyChanging("AVGOfMachine");
                    this._AVGOfMachine = value;
                    this.SendPropertyChanged("AVGOfMachine");
                    this.OnAVGOfMachineChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Remark in the schema.
        /// </summary>
        [Column(Storage = "_Remark", DbType = "VARCHAR(100)", UpdateCheck = UpdateCheck.Never)]
        public string Remark
        {
            get
            {
                return this._Remark;
            }
            set
            {
                if (this._Remark != value)
                {
                    this.OnRemarkChanging(value);
                    this.SendPropertyChanging("Remark");
                    this._Remark = value;
                    this.SendPropertyChanged("Remark");
                    this.OnRemarkChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for User in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_KarigerDailySheet", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if ((previousValue != value) || (this._User.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("User");
                    if (previousValue != null)
                    {
                        this._User.Entity = null;
                        previousValue.KarigerDailySheets.Remove(this);
                    }
                    this._User.Entity = value;
                    if (value != null)
                    {
                        this._UserID = value.UserID;
                        value.KarigerDailySheets.Add(this);
                    }
                    else
                    {
                        this._UserID = default(int?);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Shift in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Shift_KarigerDailySheet", Storage="_Shift", ThisKey="ShiftID", OtherKey="ShiftID", IsForeignKey=true)]
        public Shift Shift
        {
            get
            {
                return this._Shift.Entity;
            }
            set
            {
                Shift previousValue = this._Shift.Entity;
                if ((previousValue != value) || (this._Shift.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Shift");
                    if (previousValue != null)
                    {
                        this._Shift.Entity = null;
                        previousValue.KarigerDailySheets.Remove(this);
                    }
                    this._Shift.Entity = value;
                    if (value != null)
                    {
                        this._ShiftID = value.ShiftID;
                        value.KarigerDailySheets.Add(this);
                    }
                    else
                    {
                        this._ShiftID = default(int?);
                    }
                    this.SendPropertyChanged("Shift");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for KarkhanaBookContext.PaymentSlip in the schema.
    /// </summary>
    [Table(Name = @"dbo.PaymentSlips")]
    public partial class PaymentSlip : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _PaymentSlipIndex;

        private string _ChallanSlipSerialNumber;

        private string _BillSerialNumber;

        private double? _TotalWeight;

        private double? _Payment;

        private System.DateTime? _DateTime;

        private string _Remark;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnPaymentSlipIndexChanging(int value);
        partial void OnPaymentSlipIndexChanged();
        partial void OnChallanSlipSerialNumberChanging(string value);
        partial void OnChallanSlipSerialNumberChanged();
        partial void OnBillSerialNumberChanging(string value);
        partial void OnBillSerialNumberChanged();
        partial void OnTotalWeightChanging(double? value);
        partial void OnTotalWeightChanged();
        partial void OnPaymentChanging(double? value);
        partial void OnPaymentChanged();
        partial void OnDateTimeChanging(System.DateTime? value);
        partial void OnDateTimeChanged();
        partial void OnRemarkChanging(string value);
        partial void OnRemarkChanged();
        #endregion

        public PaymentSlip()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PaymentSlipIndex in the schema.
        /// </summary>
        [Column(Storage = "_PaymentSlipIndex", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int PaymentSlipIndex
        {
            get
            {
                return this._PaymentSlipIndex;
            }
            set
            {
                if (this._PaymentSlipIndex != value)
                {
                    this.OnPaymentSlipIndexChanging(value);
                    this.SendPropertyChanging("PaymentSlipIndex");
                    this._PaymentSlipIndex = value;
                    this.SendPropertyChanged("PaymentSlipIndex");
                    this.OnPaymentSlipIndexChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ChallanSlipSerialNumber in the schema.
        /// </summary>
        [Column(Storage = "_ChallanSlipSerialNumber", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string ChallanSlipSerialNumber
        {
            get
            {
                return this._ChallanSlipSerialNumber;
            }
            set
            {
                if (this._ChallanSlipSerialNumber != value)
                {
                    this.OnChallanSlipSerialNumberChanging(value);
                    this.SendPropertyChanging("ChallanSlipSerialNumber");
                    this._ChallanSlipSerialNumber = value;
                    this.SendPropertyChanged("ChallanSlipSerialNumber");
                    this.OnChallanSlipSerialNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BillSerialNumber in the schema.
        /// </summary>
        [Column(Storage = "_BillSerialNumber", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string BillSerialNumber
        {
            get
            {
                return this._BillSerialNumber;
            }
            set
            {
                if (this._BillSerialNumber != value)
                {
                    this.OnBillSerialNumberChanging(value);
                    this.SendPropertyChanging("BillSerialNumber");
                    this._BillSerialNumber = value;
                    this.SendPropertyChanged("BillSerialNumber");
                    this.OnBillSerialNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalWeight in the schema.
        /// </summary>
        [Column(Storage = "_TotalWeight", DbType = "FLOAT", UpdateCheck = UpdateCheck.Never)]
        public double? TotalWeight
        {
            get
            {
                return this._TotalWeight;
            }
            set
            {
                if (this._TotalWeight != value)
                {
                    this.OnTotalWeightChanging(value);
                    this.SendPropertyChanging("TotalWeight");
                    this._TotalWeight = value;
                    this.SendPropertyChanged("TotalWeight");
                    this.OnTotalWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Payment in the schema.
        /// </summary>
        [Column(Storage = "_Payment", DbType = "FLOAT", UpdateCheck = UpdateCheck.Never)]
        public double? Payment
        {
            get
            {
                return this._Payment;
            }
            set
            {
                if (this._Payment != value)
                {
                    this.OnPaymentChanging(value);
                    this.SendPropertyChanging("Payment");
                    this._Payment = value;
                    this.SendPropertyChanged("Payment");
                    this.OnPaymentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateTime in the schema.
        /// </summary>
        [Column(Storage = "_DateTime", DbType = "DATETIME", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? DateTime
        {
            get
            {
                return this._DateTime;
            }
            set
            {
                if (this._DateTime != value)
                {
                    this.OnDateTimeChanging(value);
                    this.SendPropertyChanging("DateTime");
                    this._DateTime = value;
                    this.SendPropertyChanged("DateTime");
                    this.OnDateTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Remark in the schema.
        /// </summary>
        [Column(Storage = "_Remark", DbType = "VARCHAR(100)", UpdateCheck = UpdateCheck.Never)]
        public string Remark
        {
            get
            {
                return this._Remark;
            }
            set
            {
                if (this._Remark != value)
                {
                    this.OnRemarkChanging(value);
                    this.SendPropertyChanging("Remark");
                    this._Remark = value;
                    this.SendPropertyChanged("Remark");
                    this.OnRemarkChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for KarkhanaBookContext.RefreshToken in the schema.
    /// </summary>
    [Table(Name = @"dbo.RefreshToken")]
    public partial class RefreshToken : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _RefreshTokenID;

        private string _RefreshToken1;
        #pragma warning restore 0649

        private EntitySet<UserRefreshToken> _UserRefreshTokens;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnRefreshTokenIDChanging(int value);
        partial void OnRefreshTokenIDChanged();
        partial void OnRefreshToken1Changing(string value);
        partial void OnRefreshToken1Changed();
        #endregion

        public RefreshToken()
        {
            this._UserRefreshTokens = new EntitySet<UserRefreshToken>(new Action<UserRefreshToken>(this.attach_UserRefreshTokens), new Action<UserRefreshToken>(this.detach_UserRefreshTokens));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for RefreshTokenID in the schema.
        /// </summary>
        [Column(Storage = "_RefreshTokenID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int RefreshTokenID
        {
            get
            {
                return this._RefreshTokenID;
            }
            set
            {
                if (this._RefreshTokenID != value)
                {
                    this.OnRefreshTokenIDChanging(value);
                    this.SendPropertyChanging("RefreshTokenID");
                    this._RefreshTokenID = value;
                    this.SendPropertyChanged("RefreshTokenID");
                    this.OnRefreshTokenIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RefreshToken1 in the schema.
        /// </summary>
        [Column(Name = @"RefreshToken", Storage = "_RefreshToken1", DbType = "VARCHAR(100)", UpdateCheck = UpdateCheck.Never)]
        public string RefreshToken1
        {
            get
            {
                return this._RefreshToken1;
            }
            set
            {
                if (this._RefreshToken1 != value)
                {
                    this.OnRefreshToken1Changing(value);
                    this.SendPropertyChanging("RefreshToken1");
                    this._RefreshToken1 = value;
                    this.SendPropertyChanged("RefreshToken1");
                    this.OnRefreshToken1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserRefreshTokens in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="RefreshToken_UserRefreshToken", Storage="_UserRefreshTokens", ThisKey="RefreshTokenID", OtherKey="RefreshTokenID", DeleteRule="NO ACTION")]
        public EntitySet<UserRefreshToken> UserRefreshTokens
        {
            get
            {
                return this._UserRefreshTokens;
            }
            set
            {
                this._UserRefreshTokens.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_UserRefreshTokens(UserRefreshToken entity)
        {
            this.SendPropertyChanging("UserRefreshTokens");
            entity.RefreshToken = this;
        }
    
        private void detach_UserRefreshTokens(UserRefreshToken entity)
        {
            this.SendPropertyChanging("UserRefreshTokens");
            entity.RefreshToken = null;
        }
    }

    /// <summary>
    /// There are no comments for KarkhanaBookContext.Role in the schema.
    /// </summary>
    [Table(Name = @"dbo.Roles")]
    public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _RoleID;

        private string _RoleName;
        #pragma warning restore 0649

        private EntitySet<User> _Users;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnRoleIDChanging(int value);
        partial void OnRoleIDChanged();
        partial void OnRoleNameChanging(string value);
        partial void OnRoleNameChanged();
        #endregion

        public Role()
        {
            this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for RoleID in the schema.
        /// </summary>
        [Column(Storage = "_RoleID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int RoleID
        {
            get
            {
                return this._RoleID;
            }
            set
            {
                if (this._RoleID != value)
                {
                    this.OnRoleIDChanging(value);
                    this.SendPropertyChanging("RoleID");
                    this._RoleID = value;
                    this.SendPropertyChanged("RoleID");
                    this.OnRoleIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RoleName in the schema.
        /// </summary>
        [Column(Storage = "_RoleName", DbType = "VARCHAR(100)", UpdateCheck = UpdateCheck.Never)]
        public string RoleName
        {
            get
            {
                return this._RoleName;
            }
            set
            {
                if (this._RoleName != value)
                {
                    this.OnRoleNameChanging(value);
                    this.SendPropertyChanging("RoleName");
                    this._RoleName = value;
                    this.SendPropertyChanged("RoleName");
                    this.OnRoleNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Users in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Role_User", Storage="_Users", ThisKey="RoleID", OtherKey="RoleID", DeleteRule="NO ACTION")]
        public EntitySet<User> Users
        {
            get
            {
                return this._Users;
            }
            set
            {
                this._Users.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Users(User entity)
        {
            this.SendPropertyChanging("Users");
            entity.Role = this;
        }
    
        private void detach_Users(User entity)
        {
            this.SendPropertyChanging("Users");
            entity.Role = null;
        }
    }

    /// <summary>
    /// There are no comments for KarkhanaBookContext.Shift in the schema.
    /// </summary>
    [Table(Name = @"dbo.Shift")]
    public partial class Shift : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ShiftID;

        private string _Shift1;
        #pragma warning restore 0649

        private EntitySet<KarigerDailySheet> _KarigerDailySheets;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnShiftIDChanging(int value);
        partial void OnShiftIDChanged();
        partial void OnShift1Changing(string value);
        partial void OnShift1Changed();
        #endregion

        public Shift()
        {
            this._KarigerDailySheets = new EntitySet<KarigerDailySheet>(new Action<KarigerDailySheet>(this.attach_KarigerDailySheets), new Action<KarigerDailySheet>(this.detach_KarigerDailySheets));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ShiftID in the schema.
        /// </summary>
        [Column(Storage = "_ShiftID", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int ShiftID
        {
            get
            {
                return this._ShiftID;
            }
            set
            {
                if (this._ShiftID != value)
                {
                    this.OnShiftIDChanging(value);
                    this.SendPropertyChanging("ShiftID");
                    this._ShiftID = value;
                    this.SendPropertyChanged("ShiftID");
                    this.OnShiftIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Shift1 in the schema.
        /// </summary>
        [Column(Name = @"Shift", Storage = "_Shift1", DbType = "NCHAR(10)", UpdateCheck = UpdateCheck.Never)]
        public string Shift1
        {
            get
            {
                return this._Shift1;
            }
            set
            {
                if (this._Shift1 != value)
                {
                    this.OnShift1Changing(value);
                    this.SendPropertyChanging("Shift1");
                    this._Shift1 = value;
                    this.SendPropertyChanged("Shift1");
                    this.OnShift1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for KarigerDailySheets in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Shift_KarigerDailySheet", Storage="_KarigerDailySheets", ThisKey="ShiftID", OtherKey="ShiftID", DeleteRule="NO ACTION")]
        public EntitySet<KarigerDailySheet> KarigerDailySheets
        {
            get
            {
                return this._KarigerDailySheets;
            }
            set
            {
                this._KarigerDailySheets.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_KarigerDailySheets(KarigerDailySheet entity)
        {
            this.SendPropertyChanging("KarigerDailySheets");
            entity.Shift = this;
        }
    
        private void detach_KarigerDailySheets(KarigerDailySheet entity)
        {
            this.SendPropertyChanging("KarigerDailySheets");
            entity.Shift = null;
        }
    }

    /// <summary>
    /// There are no comments for KarkhanaBookContext.TakaChallan in the schema.
    /// </summary>
    [Table(Name = @"dbo.TakaChallan")]
    public partial class TakaChallan : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _TakaChallanIndex;

        private int? _TakaChallanNumber;

        private int? _TotalTakaQuantity;

        private double? _TotalMeter;

        private double? _TotalWeight;

        private double? _RsPerMeter;

        private double? _TotalBillValue;

        private string _Remark;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnTakaChallanIndexChanging(int value);
        partial void OnTakaChallanIndexChanged();
        partial void OnTakaChallanNumberChanging(int? value);
        partial void OnTakaChallanNumberChanged();
        partial void OnTotalTakaQuantityChanging(int? value);
        partial void OnTotalTakaQuantityChanged();
        partial void OnTotalMeterChanging(double? value);
        partial void OnTotalMeterChanged();
        partial void OnTotalWeightChanging(double? value);
        partial void OnTotalWeightChanged();
        partial void OnRsPerMeterChanging(double? value);
        partial void OnRsPerMeterChanged();
        partial void OnTotalBillValueChanging(double? value);
        partial void OnTotalBillValueChanged();
        partial void OnRemarkChanging(string value);
        partial void OnRemarkChanged();
        #endregion

        public TakaChallan()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for TakaChallanIndex in the schema.
        /// </summary>
        [Column(Storage = "_TakaChallanIndex", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int TakaChallanIndex
        {
            get
            {
                return this._TakaChallanIndex;
            }
            set
            {
                if (this._TakaChallanIndex != value)
                {
                    this.OnTakaChallanIndexChanging(value);
                    this.SendPropertyChanging("TakaChallanIndex");
                    this._TakaChallanIndex = value;
                    this.SendPropertyChanged("TakaChallanIndex");
                    this.OnTakaChallanIndexChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TakaChallanNumber in the schema.
        /// </summary>
        [Column(Storage = "_TakaChallanNumber", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? TakaChallanNumber
        {
            get
            {
                return this._TakaChallanNumber;
            }
            set
            {
                if (this._TakaChallanNumber != value)
                {
                    this.OnTakaChallanNumberChanging(value);
                    this.SendPropertyChanging("TakaChallanNumber");
                    this._TakaChallanNumber = value;
                    this.SendPropertyChanged("TakaChallanNumber");
                    this.OnTakaChallanNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalTakaQuantity in the schema.
        /// </summary>
        [Column(Storage = "_TotalTakaQuantity", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? TotalTakaQuantity
        {
            get
            {
                return this._TotalTakaQuantity;
            }
            set
            {
                if (this._TotalTakaQuantity != value)
                {
                    this.OnTotalTakaQuantityChanging(value);
                    this.SendPropertyChanging("TotalTakaQuantity");
                    this._TotalTakaQuantity = value;
                    this.SendPropertyChanged("TotalTakaQuantity");
                    this.OnTotalTakaQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalMeter in the schema.
        /// </summary>
        [Column(Storage = "_TotalMeter", DbType = "FLOAT", UpdateCheck = UpdateCheck.Never)]
        public double? TotalMeter
        {
            get
            {
                return this._TotalMeter;
            }
            set
            {
                if (this._TotalMeter != value)
                {
                    this.OnTotalMeterChanging(value);
                    this.SendPropertyChanging("TotalMeter");
                    this._TotalMeter = value;
                    this.SendPropertyChanged("TotalMeter");
                    this.OnTotalMeterChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalWeight in the schema.
        /// </summary>
        [Column(Storage = "_TotalWeight", DbType = "FLOAT", UpdateCheck = UpdateCheck.Never)]
        public double? TotalWeight
        {
            get
            {
                return this._TotalWeight;
            }
            set
            {
                if (this._TotalWeight != value)
                {
                    this.OnTotalWeightChanging(value);
                    this.SendPropertyChanging("TotalWeight");
                    this._TotalWeight = value;
                    this.SendPropertyChanged("TotalWeight");
                    this.OnTotalWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RsPerMeter in the schema.
        /// </summary>
        [Column(Storage = "_RsPerMeter", DbType = "FLOAT", UpdateCheck = UpdateCheck.Never)]
        public double? RsPerMeter
        {
            get
            {
                return this._RsPerMeter;
            }
            set
            {
                if (this._RsPerMeter != value)
                {
                    this.OnRsPerMeterChanging(value);
                    this.SendPropertyChanging("RsPerMeter");
                    this._RsPerMeter = value;
                    this.SendPropertyChanged("RsPerMeter");
                    this.OnRsPerMeterChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalBillValue in the schema.
        /// </summary>
        [Column(Storage = "_TotalBillValue", DbType = "FLOAT", UpdateCheck = UpdateCheck.Never)]
        public double? TotalBillValue
        {
            get
            {
                return this._TotalBillValue;
            }
            set
            {
                if (this._TotalBillValue != value)
                {
                    this.OnTotalBillValueChanging(value);
                    this.SendPropertyChanging("TotalBillValue");
                    this._TotalBillValue = value;
                    this.SendPropertyChanged("TotalBillValue");
                    this.OnTotalBillValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Remark in the schema.
        /// </summary>
        [Column(Storage = "_Remark", DbType = "VARCHAR(100)", UpdateCheck = UpdateCheck.Never)]
        public string Remark
        {
            get
            {
                return this._Remark;
            }
            set
            {
                if (this._Remark != value)
                {
                    this.OnRemarkChanging(value);
                    this.SendPropertyChanging("Remark");
                    this._Remark = value;
                    this.SendPropertyChanged("Remark");
                    this.OnRemarkChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for KarkhanaBookContext.TakaIssue in the schema.
    /// </summary>
    [Table(Name = @"dbo.TakaIssues")]
    public partial class TakaIssue : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _TakaIssueIndex;

        private int? _TakaChallanNumber;

        private int? _TakaID;

        private int? _SlotNumber;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnTakaIssueIndexChanging(int value);
        partial void OnTakaIssueIndexChanged();
        partial void OnTakaChallanNumberChanging(int? value);
        partial void OnTakaChallanNumberChanged();
        partial void OnTakaIDChanging(int? value);
        partial void OnTakaIDChanged();
        partial void OnSlotNumberChanging(int? value);
        partial void OnSlotNumberChanged();
        #endregion

        public TakaIssue()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for TakaIssueIndex in the schema.
        /// </summary>
        [Column(Storage = "_TakaIssueIndex", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int TakaIssueIndex
        {
            get
            {
                return this._TakaIssueIndex;
            }
            set
            {
                if (this._TakaIssueIndex != value)
                {
                    this.OnTakaIssueIndexChanging(value);
                    this.SendPropertyChanging("TakaIssueIndex");
                    this._TakaIssueIndex = value;
                    this.SendPropertyChanged("TakaIssueIndex");
                    this.OnTakaIssueIndexChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TakaChallanNumber in the schema.
        /// </summary>
        [Column(Storage = "_TakaChallanNumber", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? TakaChallanNumber
        {
            get
            {
                return this._TakaChallanNumber;
            }
            set
            {
                if (this._TakaChallanNumber != value)
                {
                    this.OnTakaChallanNumberChanging(value);
                    this.SendPropertyChanging("TakaChallanNumber");
                    this._TakaChallanNumber = value;
                    this.SendPropertyChanged("TakaChallanNumber");
                    this.OnTakaChallanNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TakaID in the schema.
        /// </summary>
        [Column(Storage = "_TakaID", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? TakaID
        {
            get
            {
                return this._TakaID;
            }
            set
            {
                if (this._TakaID != value)
                {
                    this.OnTakaIDChanging(value);
                    this.SendPropertyChanging("TakaID");
                    this._TakaID = value;
                    this.SendPropertyChanged("TakaID");
                    this.OnTakaIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SlotNumber in the schema.
        /// </summary>
        [Column(Storage = "_SlotNumber", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? SlotNumber
        {
            get
            {
                return this._SlotNumber;
            }
            set
            {
                if (this._SlotNumber != value)
                {
                    this.OnSlotNumberChanging(value);
                    this.SendPropertyChanging("SlotNumber");
                    this._SlotNumber = value;
                    this.SendPropertyChanged("SlotNumber");
                    this.OnSlotNumberChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for KarkhanaBookContext.TakaSheet in the schema.
    /// </summary>
    [Table(Name = @"dbo.TakaSheet")]
    public partial class TakaSheet : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _TakaSheetIndex;

        private int? _SlotNumber;

        private int _TakaID;

        private int _MachineNumber;

        private double? _Meter;

        private double? _Weight;

        private System.DateTime? _Date;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnTakaSheetIndexChanging(int value);
        partial void OnTakaSheetIndexChanged();
        partial void OnSlotNumberChanging(int? value);
        partial void OnSlotNumberChanged();
        partial void OnTakaIDChanging(int value);
        partial void OnTakaIDChanged();
        partial void OnMachineNumberChanging(int value);
        partial void OnMachineNumberChanged();
        partial void OnMeterChanging(double? value);
        partial void OnMeterChanged();
        partial void OnWeightChanging(double? value);
        partial void OnWeightChanged();
        partial void OnDateChanging(System.DateTime? value);
        partial void OnDateChanged();
        #endregion

        public TakaSheet()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for TakaSheetIndex in the schema.
        /// </summary>
        [Column(Storage = "_TakaSheetIndex", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int TakaSheetIndex
        {
            get
            {
                return this._TakaSheetIndex;
            }
            set
            {
                if (this._TakaSheetIndex != value)
                {
                    this.OnTakaSheetIndexChanging(value);
                    this.SendPropertyChanging("TakaSheetIndex");
                    this._TakaSheetIndex = value;
                    this.SendPropertyChanged("TakaSheetIndex");
                    this.OnTakaSheetIndexChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SlotNumber in the schema.
        /// </summary>
        [Column(Storage = "_SlotNumber", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? SlotNumber
        {
            get
            {
                return this._SlotNumber;
            }
            set
            {
                if (this._SlotNumber != value)
                {
                    this.OnSlotNumberChanging(value);
                    this.SendPropertyChanging("SlotNumber");
                    this._SlotNumber = value;
                    this.SendPropertyChanged("SlotNumber");
                    this.OnSlotNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TakaID in the schema.
        /// </summary>
        [Column(Storage = "_TakaID", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int TakaID
        {
            get
            {
                return this._TakaID;
            }
            set
            {
                if (this._TakaID != value)
                {
                    this.OnTakaIDChanging(value);
                    this.SendPropertyChanging("TakaID");
                    this._TakaID = value;
                    this.SendPropertyChanged("TakaID");
                    this.OnTakaIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MachineNumber in the schema.
        /// </summary>
        [Column(Storage = "_MachineNumber", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int MachineNumber
        {
            get
            {
                return this._MachineNumber;
            }
            set
            {
                if (this._MachineNumber != value)
                {
                    this.OnMachineNumberChanging(value);
                    this.SendPropertyChanging("MachineNumber");
                    this._MachineNumber = value;
                    this.SendPropertyChanged("MachineNumber");
                    this.OnMachineNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Meter in the schema.
        /// </summary>
        [Column(Storage = "_Meter", DbType = "FLOAT", UpdateCheck = UpdateCheck.Never)]
        public double? Meter
        {
            get
            {
                return this._Meter;
            }
            set
            {
                if (this._Meter != value)
                {
                    this.OnMeterChanging(value);
                    this.SendPropertyChanging("Meter");
                    this._Meter = value;
                    this.SendPropertyChanged("Meter");
                    this.OnMeterChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Weight in the schema.
        /// </summary>
        [Column(Storage = "_Weight", DbType = "FLOAT", UpdateCheck = UpdateCheck.Never)]
        public double? Weight
        {
            get
            {
                return this._Weight;
            }
            set
            {
                if (this._Weight != value)
                {
                    this.OnWeightChanging(value);
                    this.SendPropertyChanging("Weight");
                    this._Weight = value;
                    this.SendPropertyChanged("Weight");
                    this.OnWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Date in the schema.
        /// </summary>
        [Column(Storage = "_Date", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if (this._Date != value)
                {
                    this.OnDateChanging(value);
                    this.SendPropertyChanging("Date");
                    this._Date = value;
                    this.SendPropertyChanged("Date");
                    this.OnDateChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for KarkhanaBookContext.UserRefreshToken in the schema.
    /// </summary>
    [Table(Name = @"dbo.UserRefreshToken")]
    public partial class UserRefreshToken : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UserID;

        private int _RefreshTokenID;
        #pragma warning restore 0649

        private EntityRef<User> _User;

        private EntityRef<RefreshToken> _RefreshToken;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        partial void OnRefreshTokenIDChanging(int value);
        partial void OnRefreshTokenIDChanged();
        #endregion

        public UserRefreshToken()
        {
            this._User  = default(EntityRef<User>);
            this._RefreshToken  = default(EntityRef<RefreshToken>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UserID in the schema.
        /// </summary>
        [Column(Storage = "_UserID", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if (this._UserID != value)
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging("UserID");
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RefreshTokenID in the schema.
        /// </summary>
        [Column(Storage = "_RefreshTokenID", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int RefreshTokenID
        {
            get
            {
                return this._RefreshTokenID;
            }
            set
            {
                if (this._RefreshTokenID != value)
                {
                    if (this._RefreshToken.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnRefreshTokenIDChanging(value);
                    this.SendPropertyChanging("RefreshTokenID");
                    this._RefreshTokenID = value;
                    this.SendPropertyChanged("RefreshTokenID");
                    this.OnRefreshTokenIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for User in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_UserRefreshToken", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if ((previousValue != value) || (this._User.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("User");
                    if (previousValue != null)
                    {
                        this._User.Entity = null;
                        previousValue.UserRefreshTokens.Remove(this);
                    }
                    this._User.Entity = value;
                    if (value != null)
                    {
                        this._UserID = value.UserID;
                        value.UserRefreshTokens.Add(this);
                    }
                    else
                    {
                        this._UserID = default(int);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RefreshToken in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="RefreshToken_UserRefreshToken", Storage="_RefreshToken", ThisKey="RefreshTokenID", OtherKey="RefreshTokenID", IsForeignKey=true)]
        public RefreshToken RefreshToken
        {
            get
            {
                return this._RefreshToken.Entity;
            }
            set
            {
                RefreshToken previousValue = this._RefreshToken.Entity;
                if ((previousValue != value) || (this._RefreshToken.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("RefreshToken");
                    if (previousValue != null)
                    {
                        this._RefreshToken.Entity = null;
                        previousValue.UserRefreshTokens.Remove(this);
                    }
                    this._RefreshToken.Entity = value;
                    if (value != null)
                    {
                        this._RefreshTokenID = value.RefreshTokenID;
                        value.UserRefreshTokens.Add(this);
                    }
                    else
                    {
                        this._RefreshTokenID = default(int);
                    }
                    this.SendPropertyChanged("RefreshToken");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for KarkhanaBookContext.User in the schema.
    /// </summary>
    [Table(Name = @"dbo.Users")]
    public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UserID;

        private string _UserName;

        private string _Email;

        private string _Password;

        private string _ContactNumber;

        private string _AlternetContactNumber;

        private int? _RoleID;

        private System.DateTime? _DateTime;
        #pragma warning restore 0649

        private EntitySet<KarigerDailySheet> _KarigerDailySheets;

        private EntitySet<UserRefreshToken> _UserRefreshTokens;

        private EntityRef<Role> _Role;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnContactNumberChanging(string value);
        partial void OnContactNumberChanged();
        partial void OnAlternetContactNumberChanging(string value);
        partial void OnAlternetContactNumberChanged();
        partial void OnRoleIDChanging(int? value);
        partial void OnRoleIDChanged();
        partial void OnDateTimeChanging(System.DateTime? value);
        partial void OnDateTimeChanged();
        #endregion

        public User()
        {
            this._KarigerDailySheets = new EntitySet<KarigerDailySheet>(new Action<KarigerDailySheet>(this.attach_KarigerDailySheets), new Action<KarigerDailySheet>(this.detach_KarigerDailySheets));
            this._UserRefreshTokens = new EntitySet<UserRefreshToken>(new Action<UserRefreshToken>(this.attach_UserRefreshTokens), new Action<UserRefreshToken>(this.detach_UserRefreshTokens));
            this._Role  = default(EntityRef<Role>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UserID in the schema.
        /// </summary>
        [Column(Storage = "_UserID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if (this._UserID != value)
                {
                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging("UserID");
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserName in the schema.
        /// </summary>
        [Column(Storage = "_UserName", DbType = "VARCHAR(150)", UpdateCheck = UpdateCheck.Never)]
        public string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if (this._UserName != value)
                {
                    this.OnUserNameChanging(value);
                    this.SendPropertyChanging("UserName");
                    this._UserName = value;
                    this.SendPropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Storage = "_Email", DbType = "VARCHAR(80)", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging("Email");
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [Column(Storage = "_Password", DbType = "VARCHAR(100)", UpdateCheck = UpdateCheck.Never)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging("Password");
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ContactNumber in the schema.
        /// </summary>
        [Column(Storage = "_ContactNumber", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string ContactNumber
        {
            get
            {
                return this._ContactNumber;
            }
            set
            {
                if (this._ContactNumber != value)
                {
                    this.OnContactNumberChanging(value);
                    this.SendPropertyChanging("ContactNumber");
                    this._ContactNumber = value;
                    this.SendPropertyChanged("ContactNumber");
                    this.OnContactNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AlternetContactNumber in the schema.
        /// </summary>
        [Column(Storage = "_AlternetContactNumber", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string AlternetContactNumber
        {
            get
            {
                return this._AlternetContactNumber;
            }
            set
            {
                if (this._AlternetContactNumber != value)
                {
                    this.OnAlternetContactNumberChanging(value);
                    this.SendPropertyChanging("AlternetContactNumber");
                    this._AlternetContactNumber = value;
                    this.SendPropertyChanged("AlternetContactNumber");
                    this.OnAlternetContactNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RoleID in the schema.
        /// </summary>
        [Column(Storage = "_RoleID", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? RoleID
        {
            get
            {
                return this._RoleID;
            }
            set
            {
                if (this._RoleID != value)
                {
                    if (this._Role.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnRoleIDChanging(value);
                    this.SendPropertyChanging("RoleID");
                    this._RoleID = value;
                    this.SendPropertyChanged("RoleID");
                    this.OnRoleIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateTime in the schema.
        /// </summary>
        [Column(Storage = "_DateTime", DbType = "DATETIME", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? DateTime
        {
            get
            {
                return this._DateTime;
            }
            set
            {
                if (this._DateTime != value)
                {
                    this.OnDateTimeChanging(value);
                    this.SendPropertyChanging("DateTime");
                    this._DateTime = value;
                    this.SendPropertyChanged("DateTime");
                    this.OnDateTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for KarigerDailySheets in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_KarigerDailySheet", Storage="_KarigerDailySheets", ThisKey="UserID", OtherKey="UserID", DeleteRule="NO ACTION")]
        public EntitySet<KarigerDailySheet> KarigerDailySheets
        {
            get
            {
                return this._KarigerDailySheets;
            }
            set
            {
                this._KarigerDailySheets.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for UserRefreshTokens in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_UserRefreshToken", Storage="_UserRefreshTokens", ThisKey="UserID", OtherKey="UserID", DeleteRule="NO ACTION")]
        public EntitySet<UserRefreshToken> UserRefreshTokens
        {
            get
            {
                return this._UserRefreshTokens;
            }
            set
            {
                this._UserRefreshTokens.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Role in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Role_User", Storage="_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
        public Role Role
        {
            get
            {
                return this._Role.Entity;
            }
            set
            {
                Role previousValue = this._Role.Entity;
                if ((previousValue != value) || (this._Role.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Role");
                    if (previousValue != null)
                    {
                        this._Role.Entity = null;
                        previousValue.Users.Remove(this);
                    }
                    this._Role.Entity = value;
                    if (value != null)
                    {
                        this._RoleID = value.RoleID;
                        value.Users.Add(this);
                    }
                    else
                    {
                        this._RoleID = default(int?);
                    }
                    this.SendPropertyChanged("Role");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_KarigerDailySheets(KarigerDailySheet entity)
        {
            this.SendPropertyChanging("KarigerDailySheets");
            entity.User = this;
        }
    
        private void detach_KarigerDailySheets(KarigerDailySheet entity)
        {
            this.SendPropertyChanging("KarigerDailySheets");
            entity.User = null;
        }

        private void attach_UserRefreshTokens(UserRefreshToken entity)
        {
            this.SendPropertyChanging("UserRefreshTokens");
            entity.User = this;
        }
    
        private void detach_UserRefreshTokens(UserRefreshToken entity)
        {
            this.SendPropertyChanging("UserRefreshTokens");
            entity.User = null;
        }
    }

}
